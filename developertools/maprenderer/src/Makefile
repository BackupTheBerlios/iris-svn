# Makefile.in generated by automake 1.7.3 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ..
pkgdatadir = $(datadir)/swordfish
pkglibdir = $(libdir)/swordfish
pkgincludedir = $(includedir)/swordfish
top_builddir = ..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/ginstall -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_triplet = i686-pc-linux-gnu
VPATH = loaders renderer gui csl net granny
ACLOCAL = aclocal-1.7
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = tar
AUTOCONF = autoconf
AUTOHEADER = autoheader
AUTOMAKE = automake-1.7
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -I/usr/include/SDL -D_REENTRANT  -I/usr/X11R6/include -DHAVE_OPENGL
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
GL_LIBS =  -L/usr/X11R6/lib -lGL -lGLU
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lSDL_ttf -lSDL_net -lSDL_mixer -lSDL_image  -L/usr/lib -Wl,-rpath,/usr/lib -lSDL -lpthread
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = makeinfo
OBJEXT = o
PACKAGE = swordfish
PACKAGE_BUGREPORT = BUG-REPORT-ADDRESS
PACKAGE_NAME = FULL-PACKAGE-NAME
PACKAGE_STRING = FULL-PACKAGE-NAME VERSION
PACKAGE_TARNAME = full-package-name
PACKAGE_VERSION = VERSION
PATH_SEPARATOR = :
SDL_CFLAGS = -I/usr/include/SDL -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS = -L/usr/lib -Wl,-rpath,/usr/lib -lSDL -lpthread
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.1
X_CFLAGS =  -I/usr/X11R6/include
X_EXTRA_LIBS = 
X_LIBS =  -L/usr/X11R6/lib
X_PRE_LIBS =  -lSM -lICE
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_STRIP = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /data/coding/ui2d/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
AM_CXXFLAGS = -g -O2 -I../include -Wall -pedantic

bin_PROGRAMS = ui2d
ui2d_LDADD =  -L/usr/X11R6/lib -lGL -lGLU ./csl/libZCslG.so.4
ui2d_SOURCES = ui2d.cpp \
SDLEvent.cpp \
SDLScreen.cpp \
Config.cpp \
Debug.cpp \
xml.cpp \
Game.cpp \
Renderer.cpp \
Texture.cpp \
TextureBuffer.cpp \
ArtLoader.cpp \
VerdataLoader.cpp \
GroundTextures.cpp \
Buffer.cpp \
HueLoader.cpp \
SkillLoader.cpp \
UOMap.cpp \
TileDataLoader.cpp \
LocalMapPatches.cpp \
MapBuffer.cpp \
MapBlock.cpp \
StaticObjects.cpp \
GumpLoader.cpp \
Border.cpp \
Button.cpp \
Control.cpp \
Container.cpp \
GUIHandler.cpp \
Gump.cpp \
Image.cpp \
Stack.cpp \
Client.cpp \
Packet.cpp \
huffman.cpp \
DynamicObjects.cpp \
Characters.cpp \
FontLoader.cpp

subdir = src
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
bin_PROGRAMS = ui2d$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_ui2d_OBJECTS = ui2d.$(OBJEXT) SDLEvent.$(OBJEXT) SDLScreen.$(OBJEXT) \
	Config.$(OBJEXT) Debug.$(OBJEXT) xml.$(OBJEXT) Game.$(OBJEXT) \
	Renderer.$(OBJEXT) Texture.$(OBJEXT) TextureBuffer.$(OBJEXT) \
	ArtLoader.$(OBJEXT) VerdataLoader.$(OBJEXT) \
	GroundTextures.$(OBJEXT) Buffer.$(OBJEXT) HueLoader.$(OBJEXT) \
	SkillLoader.$(OBJEXT) UOMap.$(OBJEXT) TileDataLoader.$(OBJEXT) \
	LocalMapPatches.$(OBJEXT) MapBuffer.$(OBJEXT) \
	MapBlock.$(OBJEXT) StaticObjects.$(OBJEXT) GumpLoader.$(OBJEXT) \
	Border.$(OBJEXT) Button.$(OBJEXT) Control.$(OBJEXT) \
	Container.$(OBJEXT) GUIHandler.$(OBJEXT) Gump.$(OBJEXT) \
	Image.$(OBJEXT) Stack.$(OBJEXT) Client.$(OBJEXT) \
	Packet.$(OBJEXT) huffman.$(OBJEXT) DynamicObjects.$(OBJEXT) \
	Characters.$(OBJEXT) FontLoader.$(OBJEXT)
ui2d_OBJECTS = $(am_ui2d_OBJECTS)
ui2d_DEPENDENCIES = ./csl/libZCslG.so.4
ui2d_LDFLAGS =

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/ArtLoader.Po ./$(DEPDIR)/Border.Po \
	./$(DEPDIR)/Buffer.Po ./$(DEPDIR)/Button.Po \
	./$(DEPDIR)/Characters.Po ./$(DEPDIR)/Client.Po \
	./$(DEPDIR)/Config.Po ./$(DEPDIR)/Container.Po \
	./$(DEPDIR)/Control.Po ./$(DEPDIR)/Debug.Po \
	./$(DEPDIR)/DynamicObjects.Po \
	./$(DEPDIR)/FontLoader.Po ./$(DEPDIR)/GUIHandler.Po \
	./$(DEPDIR)/Game.Po ./$(DEPDIR)/GroundTextures.Po \
	./$(DEPDIR)/Gump.Po ./$(DEPDIR)/GumpLoader.Po \
	./$(DEPDIR)/HueLoader.Po ./$(DEPDIR)/Image.Po \
	./$(DEPDIR)/LocalMapPatches.Po \
	./$(DEPDIR)/MapBlock.Po ./$(DEPDIR)/MapBuffer.Po \
	./$(DEPDIR)/Packet.Po ./$(DEPDIR)/Renderer.Po \
	./$(DEPDIR)/SDLEvent.Po ./$(DEPDIR)/SDLScreen.Po \
	./$(DEPDIR)/SkillLoader.Po ./$(DEPDIR)/Stack.Po \
	./$(DEPDIR)/StaticObjects.Po ./$(DEPDIR)/Texture.Po \
	./$(DEPDIR)/TextureBuffer.Po \
	./$(DEPDIR)/TileDataLoader.Po ./$(DEPDIR)/UOMap.Po \
	./$(DEPDIR)/VerdataLoader.Po ./$(DEPDIR)/huffman.Po \
	./$(DEPDIR)/ui2d.Po ./$(DEPDIR)/xml.Po
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
DIST_SOURCES = $(ui2d_SOURCES)
DIST_COMMON = Makefile.am Makefile.in
SOURCES = $(ui2d_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
ui2d$(EXEEXT): $(ui2d_OBJECTS) $(ui2d_DEPENDENCIES) 
	@rm -f ui2d$(EXEEXT)
	$(CXXLINK) $(ui2d_LDFLAGS) $(ui2d_OBJECTS) $(ui2d_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/ArtLoader.Po
include ./$(DEPDIR)/Border.Po
include ./$(DEPDIR)/Buffer.Po
include ./$(DEPDIR)/Button.Po
include ./$(DEPDIR)/Characters.Po
include ./$(DEPDIR)/Client.Po
include ./$(DEPDIR)/Config.Po
include ./$(DEPDIR)/Container.Po
include ./$(DEPDIR)/Control.Po
include ./$(DEPDIR)/Debug.Po
include ./$(DEPDIR)/DynamicObjects.Po
include ./$(DEPDIR)/FontLoader.Po
include ./$(DEPDIR)/GUIHandler.Po
include ./$(DEPDIR)/Game.Po
include ./$(DEPDIR)/GroundTextures.Po
include ./$(DEPDIR)/Gump.Po
include ./$(DEPDIR)/GumpLoader.Po
include ./$(DEPDIR)/HueLoader.Po
include ./$(DEPDIR)/Image.Po
include ./$(DEPDIR)/LocalMapPatches.Po
include ./$(DEPDIR)/MapBlock.Po
include ./$(DEPDIR)/MapBuffer.Po
include ./$(DEPDIR)/Packet.Po
include ./$(DEPDIR)/Renderer.Po
include ./$(DEPDIR)/SDLEvent.Po
include ./$(DEPDIR)/SDLScreen.Po
include ./$(DEPDIR)/SkillLoader.Po
include ./$(DEPDIR)/Stack.Po
include ./$(DEPDIR)/StaticObjects.Po
include ./$(DEPDIR)/Texture.Po
include ./$(DEPDIR)/TextureBuffer.Po
include ./$(DEPDIR)/TileDataLoader.Po
include ./$(DEPDIR)/UOMap.Po
include ./$(DEPDIR)/VerdataLoader.Po
include ./$(DEPDIR)/huffman.Po
include ./$(DEPDIR)/ui2d.Po
include ./$(DEPDIR)/xml.Po

distclean-depend:
	-rm -rf ./$(DEPDIR)

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(bindir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-depend distclean-generic distclean-tags distdir dvi \
	dvi-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
